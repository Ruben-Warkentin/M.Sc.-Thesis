# -*- coding: utf-8 -*-
"""02_autocorrelation_convert_to_ns.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10hmL6SQQ0vXE9zUyNDXddOoyNyzUJYZy

Code runs the rotational autocorrelation function

importing data set
"""

import numpy as np
import csv

"""Mounting Google Drive to make importing files easy"""

# from google.colab import drive
# drive.mount('/content/drive')

"""opening the dataset I want to work on, I am importing from google drive here"""

#created empty array called sv
sv = []
max_tau = 1000
#set f to the path of the data file
f = open('v_list_a0_59.txt')

#read the file, delimiter ' ' indicates spaces separate columns
reader = csv.reader(f,delimiter=' ',quoting=csv.QUOTE_NONNUMERIC) # change contents to floats, floats needed to use dot product function later on
next(reader, None) #skip headers
for row in reader: # each row is a list
        sv.append(row) #write each row to the sv array

##uncomment prins(sv) if you want to check the array
# print(sv)

"""Rotational Autocorrelation Function"""

##rotational autocorrelation function is C(tau) = <u(t).u(t+tau)>
#testing with once tau value first
frames = 10000
# fframes = 50000
y_mean = []
for tau in range (0, max_tau, 1):
  y = [] #y array stores C value, used for graph later on
  for t in range (0, frames-tau, 1):
    C = (np.dot(sv[t], sv[t+tau]))
    y.append(C)
  y_mean.append(abs(np.mean(y)))

##if you want to check the numbers, you can print x to show the array of C(tau) values
# print(x)

"""Graphing"""

import matplotlib.pyplot as plt

"""Converting x values from tau to nanoseconds"""

#converting tau to time in nanoseconds
#tau represents the change in between frames in the simulation

x_max = 10
# print(x_max)
# #time in femtoseconds
# x_max = x_max*1000000
print(x_max)

#x axis
# x = list(range(0, max_tau))
x = np.linspace(0,x_max,max_tau)

# plotting the points
plt.plot(x, y_mean)

# # naming the x axis
# plt.xlabel('tau')
plt.xlabel('time (ns)')

# # naming the y axis
plt.ylabel('autocorrelation')

# # giving a title to my graph
plt.title('t3q Rotational Autocorrelation: Atoms 0-59 ')

# # function to show the plot
plt.savefig('a0_a59.png', bbox_inches='tight')
plt.savefig('a0_a59.pdf', bbox_inches='tight')
plt.show()
